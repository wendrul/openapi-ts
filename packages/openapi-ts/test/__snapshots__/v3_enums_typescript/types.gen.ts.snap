// This file is auto-generated by @hey-api/openapi-ts

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type camelCaseCommentWithBreaks = number;

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;

/**
 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
 */
export type CommentWithBackticks = number;

/**
 * Testing backticks and quotes in string: `backticks`, 'quotes', "double quotes" and ```multiple backticks``` should work
 */
export type CommentWithBackticksAndQuotes = number;

/**
 * Testing slashes in string: \backwards\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;

/**
 * Testing expression placeholders in string: ${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export type CommentWithQuotes = number;

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;

/**
 * This is a simple number
 */
export type SimpleInteger = number;

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;

/**
 * This is a simple string
 */
export type SimpleString = string;

/**
 * A string with non-ascii (unicode) characters valid in typescript identifiers (æøåÆØÅöÔèÈ字符串)
 */
export type NonAsciiStringæøåÆØÅöôêÊ字符串 = string;

/**
 * This is a simple file
 */
export type SimpleFile = (Blob | File);

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string | null;

/**
 * This is a simple enum with strings
 */
export type EnumWithStrings = 'Success' | 'Warning' | 'Error' | "'Single Quote'" | '"Double Quotes"' | 'Non-ascii: øæåôöØÆÅÔÖ字符串';

export type EnumWithReplacedCharacters = "'Single Quote'" | '"Double Quotes"' | 'øæåôöØÆÅÔÖ字符串' | 3.1 | '';

/**
 * This is a simple enum with numbers
 */
export type EnumWithNumbers = 1 | 2 | 3 | 1.1 | 1.2 | 1.3 | 100 | 200 | 300 | -100 | -200 | -300 | -1.1 | -1.2 | -1.3;

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;

/**
 * This is a simple enum with numbers
 */
export type EnumWithExtensions = 200 | 400 | 500;

export type EnumWithXEnumNames = 0 | 1 | 2;

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<(number)>;

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<(boolean)>;

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<(string)>;

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: camelCaseCommentWithBreaks;
    bar?: string;
}>;

/**
 * This is a simple array with any of properties
 */
export type ArrayWithAnyOfProperties = Array<({
    foo?: string;
} | {
    bar?: string;
})>;

export type AnyOfAnyAndNull = {
    data?: unknown | null;
};

/**
 * This is a simple array with any of properties
 */
export type AnyOfArrays = {
    results?: Array<({
    foo?: string;
} | {
    bar?: string;
})>;
};

/**
 * This is a string dictionary
 */
export type DictionaryWithString = {
    [key: string]: (string);
};

export type DictionaryWithPropertiesAndAdditionalProperties = {
    foo?: string;
    [key: string]: (string) | undefined;
};

/**
 * This is a string reference
 */
export type DictionaryWithReference = {
    [key: string]: ModelWithString;
};

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = {
    [key: string]: Array<ModelWithString>;
};

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = {
    [key: string]: {
        [key: string]: (string);
    };
};

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = {
    [key: string]: {
        foo?: string;
        bar?: string;
    };
};

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

/**
 * This is a model with one string property
 */
export type ModelWithStringError = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

/**
 * `Comment` or `VoiceComment`. The JSON object for adding voice comments to tickets is different. See [Adding voice comments to tickets](/documentation/ticketing/managing-tickets/adding-voice-comments-to-tickets)
 */
export type Model_From_Zendesk = string;

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp1?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp1: string | null;
    /**
     * This is a simple string property
     */
    nullableProp2?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp2: string | null;
    /**
     * This is a simple enum with strings
     */
    'foo_bar-enum'?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
};

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    'foo_bar-enum'?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
    /**
     * These are the HTTP error code enums
     */
    statusCode?: '100' | '200 FOO' | '300 FOO_BAR' | '400 foo-bar' | '500 foo.bar' | '600 foo&bar';
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};

/**
 * This is a model with one enum with escaped name
 */
export type ModelWithEnumWithHyphen = {
    'foo-bar-baz-qux'?: '3.0';
};

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: {
        [key: string]: ('Success' | 'Warning' | 'Error');
    };
    dictionaryWithEnumFromDescription?: {
        [key: string]: (number);
    };
    arrayWithEnum?: Array<('Success' | 'Warning' | 'Error')>;
    arrayWithDescription?: Array<(number)>;
    /**
     * This is a simple enum with strings
     */
    'foo_bar-enum'?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
};

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

/**
 * This is a model with one property containing an array
 */
export type ModelWithArrayReadOnlyAndWriteOnly = {
    prop?: Array<ModelWithReadOnlyAndWriteOnly>;
    propWithFile?: Array<((Blob | File))>;
    propWithNumber?: Array<(number)>;
};

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<((Blob | File))>;
    propWithNumber?: Array<(number)>;
};

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: {
        [key: string]: (string);
    };
};

/**
 * This is a deprecated model with a deprecated property
 * @deprecated
 */
export type DeprecatedModel = {
    /**
     * This is a deprecated property
     * @deprecated
     */
    prop?: string;
};

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOf = {
    propA?: ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary;
};

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfAnonymous = {
    propA?: {
    propA?: string;
} | string | number;
};

/**
 * Circle
 */
export type ModelCircle = {
    kind: 'circle';
    radius?: number;
};

/**
 * Square
 */
export type ModelSquare = {
    kind: 'square';
    sideLength?: number;
};

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfDiscriminator = ModelCircle | ModelSquare;

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOf = {
    propA?: ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary;
};

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithAnyOfAnonymous = {
    propA?: {
    propA?: string;
} | string | number;
};

/**
 * This is a model with nested 'any of' property with a type null
 */
export type CompositionWithNestedAnyAndTypeNull = {
    propA?: Array<(ModelWithDictionary | null)> | Array<(ModelWithArray | null)>;
};

export type Enum1 = 'Bird' | 'Dog';

export type ConstValue = "ConstValue";

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithNestedAnyOfAndNull = {
    propA?: Array<(Enum1 | ConstValue)> | null;
};

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfAndNullable = {
    propA?: {
    boolean?: boolean;
} | ModelWithEnum | ModelWithArray | ModelWithDictionary | null;
};

/**
 * This is a model that contains a simple dictionary within composition
 */
export type CompositionWithOneOfAndSimpleDictionary = {
    propA?: boolean | {
    [key: string]: (number);
};
};

/**
 * This is a model that contains a dictionary of simple arrays within composition
 */
export type CompositionWithOneOfAndSimpleArrayDictionary = {
    propA?: boolean | {
    [key: string]: Array<(boolean)>;
};
};

/**
 * This is a model that contains a dictionary of complex arrays (composited) within composition
 */
export type CompositionWithOneOfAndComplexArrayDictionary = {
    propA?: boolean | {
    [key: string]: Array<(number | string)>;
};
};

/**
 * This is a model with one property with a 'all of' relationship
 */
export type CompositionWithAllOfAndNullable = {
    propA?: ({
    boolean?: boolean;
} & ModelWithEnum & ModelWithArray & ModelWithDictionary) | null;
};

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfAndNullable = {
    propA?: {
    boolean?: boolean;
} | ModelWithEnum | ModelWithArray | ModelWithDictionary | null;
};

/**
 * This is a base model with two simple optional properties
 */
export type CompositionBaseModel = {
    firstName?: string;
    lastname?: string;
};

/**
 * This is a model that extends the base model
 */
export type CompositionExtendedModel = CompositionBaseModel & {
    firstName: string;
    lastname: string;
    age: number;
};

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    requiredAndNullable: string | null;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string | null;
        } | null;
    } | null;
};

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
};

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
};

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
    patternWithNewline?: string;
    patternWithBacktick?: string;
};

export type File = {
    readonly id?: string;
    readonly updated_at?: string;
    readonly created_at?: string;
    mime: string;
    readonly file?: string;
};

export type _default = {
    name?: string;
};

export type Pageable = {
    page?: number;
    size?: number;
    sort?: Array<(string)>;
};

/**
 * This is a free-form object without additionalProperties.
 */
export type FreeFormObjectWithoutAdditionalProperties = {
    [key: string]: unknown;
};

/**
 * This is a free-form object with additionalProperties: true.
 */
export type FreeFormObjectWithAdditionalPropertiesEqTrue = {
    [key: string]: unknown;
};

/**
 * This is a free-form object with additionalProperties: {}.
 */
export type FreeFormObjectWithAdditionalPropertiesEqEmptyObject = {
    [key: string]: unknown;
};

export type ModelWithConst = {
    String?: "String";
    number?: 0;
    null?: null;
    withType?: "Some string";
};

/**
 * This is a model with one property and additionalProperties: true
 */
export type ModelWithAdditionalPropertiesEqTrue = {
    /**
     * This is a simple string property
     */
    prop?: string;
    [key: string]: unknown;
};

export type NestedAnyOfArraysNullable = {
    nullableArray?: Array<(string | boolean)> | null;
};

export type CompositionWithOneOfAndProperties = {
    foo: SimpleParameter;
    baz: number | null;
    qux: number;
} | {
    bar: NonAsciiStringæøåÆØÅöôêÊ字符串;
    baz: number | null;
    qux: number;
};

/**
 * An object that can be null
 */
export type NullableObject = {
    foo?: string;
} | null;

/**
 * Some % character
 */
export type CharactersInDescription = string;

export type ModelWithNullableObject = {
    data?: NullableObject;
};

export type ModelWithOneOfEnum = {
    foo: 'Bar';
} | {
    foo: 'Baz';
} | {
    foo: 'Qux';
} | {
    content: string;
    foo: 'Quux';
} | {
    content: [
        string,
        string
    ];
    foo: 'Corge';
};

export type ModelWithNestedArrayEnumsDataFoo = 'foo' | 'bar';

export type ModelWithNestedArrayEnumsDataBar = 'baz' | 'qux';

export type ModelWithNestedArrayEnumsData = {
    foo?: Array<ModelWithNestedArrayEnumsDataFoo>;
    bar?: Array<ModelWithNestedArrayEnumsDataBar>;
};

export type ModelWithNestedArrayEnums = {
    array_strings?: Array<(string)>;
    data?: ModelWithNestedArrayEnumsData;
};

export type ModelWithNestedCompositionEnums = {
    foo?: ModelWithNestedArrayEnumsDataFoo;
};

export type ModelWithReadOnlyAndWriteOnly = {
    foo: string;
    readonly bar: string;
    baz: string;
};

export type ModelWithConstantSizeArray = [
    number,
    number
];

export type ModelWithAnyOfConstantSizeArray = [
    number | string,
    number | string,
    number | string
];

export type ModelWithAnyOfConstantSizeArrayNullable = [
    number | null | string,
    number | null | string,
    number | null | string
];

export type ModelWithAnyOfConstantSizeArrayWithNSizeAndOptions = [
    number | string,
    number | string
];

export type ModelWithAnyOfConstantSizeArrayAndIntersect = [
    number & string,
    number & string
];

export type ModelWithNumericEnumUnion = {
    /**
     * Период
     */
    value?: -10 | -1 | 0 | 1 | 3 | 6 | 12;
};

/**
 * Some description with `back ticks`
 */
export type ModelWithBackticksInDescription = {
    /**
     * The template `that` should be used for parsing and importing the contents of the CSV file.
     *
     * <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the CSV file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p>
     * <pre>
     * [
     * {
     * "resourceType": "Asset",
     * "identifier": {
     * "name": "${1}",
     * "domain": {
     * "name": "${2}",
     * "community": {
     * "name": "Some Community"
     * }
     * }
     * },
     * "attributes" : {
     * "00000000-0000-0000-0000-000000003115" : [ {
     * "value" : "${3}"
     * } ],
     * "00000000-0000-0000-0000-000000000222" : [ {
     * "value" : "${4}"
     * } ]
     * }
     * }
     * ]
     * </pre>
     */
    template?: string;
};

/**
 * This is a reusable parameter
 */
export type SimpleParameter = string;

/**
 * Parameter with illegal characters
 */
export type x_Foo_Bar = string;

export type $OpenApiTs = {
    '/api/v{api-version}/no-tag': {
        post: {
            req: {
                requestBody: ModelWithReadOnlyAndWriteOnly | ModelWithArrayReadOnlyAndWriteOnly;
            };
            res: {
                200: ModelWithReadOnlyAndWriteOnly;
            };
        };
    };
    '/api/v{api-version}/simple/$count': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Model_From_Zendesk;
            };
        };
    };
    '/api/v{api-version}/foo/{foo}/bar/{bar}': {
        delete: {
            req: {
                /**
                 * bar in method
                 */
                bar: string;
                /**
                 * foo in method
                 */
                foo: string;
            };
        };
    };
    '/api/v{api-version}/parameters/{parameterPath}': {
        post: {
            req: {
                fooAllOfEnum: ModelWithNestedArrayEnumsDataFoo;
                fooRefEnum?: ModelWithNestedArrayEnumsDataFoo;
                /**
                 * This is the parameter that goes into the cookie
                 */
                parameterCookie: string | null;
                /**
                 * This is the parameter that goes into the form data
                 */
                parameterForm: string | null;
                /**
                 * This is the parameter that goes into the header
                 */
                parameterHeader: string | null;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath: string | null;
                /**
                 * This is the parameter that goes into the query params
                 */
                parameterQuery: string | null;
                /**
                 * This is the parameter that goes into the body
                 */
                requestBody: ModelWithString | null;
            };
        };
    };
    '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}': {
        post: {
            req: {
                /**
                 * This is the parameter with a reserved keyword
                 */
                _default?: string;
                /**
                 * This is the parameter that goes into the cookie
                 */
                parameterCookie: string | null;
                /**
                 * This is the parameter that goes into the request form data
                 */
                parameterForm: string | null;
                /**
                 * This is the parameter that goes into the request header
                 */
                parameterHeader: string | null;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath1?: string;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath2?: string;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath3?: string;
                /**
                 * This is the parameter that goes into the request query params
                 */
                parameterQuery: string | null;
                /**
                 * This is the parameter that goes into the body
                 */
                requestBody: ModelWithString | null;
            };
        };
    };
    '/api/v{api-version}/parameters/': {
        get: {
            req: {
                /**
                 * This is an optional parameter
                 */
                parameter?: string;
                /**
                 * This is a required parameter
                 */
                requestBody: ModelWithOneOfEnum;
            };
        };
        post: {
            req: {
                /**
                 * This is a required parameter
                 */
                parameter: Pageable;
                /**
                 * This is an optional parameter
                 */
                requestBody?: ModelWithString;
            };
        };
    };
    '/api/v{api-version}/descriptions/': {
        post: {
            req: {
                /**
                 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
                 */
                parameterWithBackticks?: unknown;
                /**
                 * Testing multiline comments in string: First line
                 * Second line
                 *
                 * Fourth line
                 */
                parameterWithBreaks?: unknown;
                /**
                 * Testing expression placeholders in string: ${expression} should work
                 */
                parameterWithExpressionPlaceholders?: unknown;
                /**
                 * Testing quotes in string: 'single quote''' and "double quotes""" should work
                 */
                parameterWithQuotes?: unknown;
                /**
                 * Testing reserved characters in string: * inline * and ** inline ** should work
                 */
                parameterWithReservedCharacters?: unknown;
                /**
                 * Testing slashes in string: \backwards\\\ and /forwards/// should work
                 */
                parameterWithSlashes?: unknown;
            };
        };
    };
    '/api/v{api-version}/parameters/deprecated': {
        post: {
            req: {
                /**
                 * This parameter is deprecated
                 * @deprecated
                 */
                parameter: DeprecatedModel | null;
            };
        };
    };
    '/api/v{api-version}/requestBody/': {
        post: {
            req: {
                /**
                 * A reusable request body
                 */
                foo?: ModelWithString;
                /**
                 * This is a reusable parameter
                 */
                parameter?: string;
            };
        };
    };
    '/api/v{api-version}/formData/': {
        post: {
            req: {
                /**
                 * A reusable request body
                 */
                formData?: ModelWithString;
                /**
                 * This is a reusable parameter
                 */
                parameter?: string;
            };
        };
    };
    '/api/v{api-version}/defaults': {
        get: {
            req: {
                /**
                 * This is a simple boolean with default value
                 */
                parameterBoolean?: boolean | null;
                /**
                 * This is a simple enum with default value
                 */
                parameterEnum?: 'Success' | 'Warning' | 'Error';
                /**
                 * This is a simple model with default value
                 */
                parameterModel?: ModelWithString | null;
                /**
                 * This is a simple number with default value
                 */
                parameterNumber?: number | null;
                /**
                 * This is a simple string with default value
                 */
                parameterString?: string | null;
            };
        };
        post: {
            req: {
                /**
                 * This is a simple boolean that is optional with default value
                 */
                parameterBoolean?: boolean;
                /**
                 * This is a simple enum that is optional with default value
                 */
                parameterEnum?: 'Success' | 'Warning' | 'Error';
                /**
                 * This is a simple model that is optional with default value
                 */
                parameterModel?: ModelWithString;
                /**
                 * This is a simple number that is optional with default value
                 */
                parameterNumber?: number;
                /**
                 * This is a simple string that is optional with default value
                 */
                parameterString?: string;
            };
        };
        put: {
            req: {
                /**
                 * This is a optional string with default
                 */
                parameterOptionalStringWithDefault?: string;
                /**
                 * This is a optional string with empty default
                 */
                parameterOptionalStringWithEmptyDefault?: string;
                /**
                 * This is a optional string with no default
                 */
                parameterOptionalStringWithNoDefault?: string;
                /**
                 * This is a string that can be null with default
                 */
                parameterStringNullableWithDefault?: string | null;
                /**
                 * This is a string that can be null with no default
                 */
                parameterStringNullableWithNoDefault?: string | null;
                /**
                 * This is a string with default
                 */
                parameterStringWithDefault: string;
                /**
                 * This is a string with empty default
                 */
                parameterStringWithEmptyDefault: string;
                /**
                 * This is a string with no default
                 */
                parameterStringWithNoDefault: string;
            };
        };
    };
    '/api/v{api-version}/no-content': {
        get: {
            res: {
                /**
                 * Success
                 */
                204: void;
            };
        };
    };
    '/api/v{api-version}/multiple-tags/response-and-no-content': {
        get: {
            res: {
                /**
                 * Response is a simple number
                 */
                200: number;
                /**
                 * Success
                 */
                204: void;
            };
        };
    };
    '/api/v{api-version}/response': {
        get: {
            res: {
                200: ModelWithString;
            };
        };
        post: {
            res: {
                /**
                 * Message for default response
                 */
                200: ModelWithString;
                /**
                 * Message for 500 error
                 */
                500: ModelWithStringError;
                /**
                 * Message for 501 error
                 */
                501: ModelWithStringError;
                /**
                 * Message for 502 error
                 */
                502: ModelWithStringError;
            };
        };
        put: {
            res: {
                /**
                 * Message for default response
                 */
                200: ModelWithString;
                /**
                 * Message for 201 response
                 */
                201: ModelThatExtends;
                /**
                 * Message for 202 response
                 */
                202: ModelThatExtendsExtends;
                /**
                 * Message for 500 error
                 */
                500: ModelWithStringError;
                /**
                 * Message for 501 error
                 */
                501: ModelWithStringError;
                /**
                 * Message for 502 error
                 */
                502: ModelWithStringError;
            };
        };
    };
    '/api/v{api-version}/multiple-tags/a': {
        get: {
            res: {
                /**
                 * Success
                 */
                204: void;
            };
        };
    };
    '/api/v{api-version}/multiple-tags/b': {
        get: {
            res: {
                /**
                 * Success
                 */
                204: void;
            };
        };
    };
    '/api/v{api-version}/collectionFormat': {
        get: {
            req: {
                /**
                 * This is an array parameter that is sent as csv format (comma-separated values)
                 */
                parameterArrayCsv: Array<(string)> | null;
                /**
                 * This is an array parameter that is sent as multi format (multiple parameter instances)
                 */
                parameterArrayMulti: Array<(string)> | null;
                /**
                 * This is an array parameter that is sent as pipes format (pipe-separated values)
                 */
                parameterArrayPipes: Array<(string)> | null;
                /**
                 * This is an array parameter that is sent as ssv format (space-separated values)
                 */
                parameterArraySsv: Array<(string)> | null;
                /**
                 * This is an array parameter that is sent as tsv format (tab-separated values)
                 */
                parameterArrayTsv: Array<(string)> | null;
            };
        };
    };
    '/api/v{api-version}/types': {
        get: {
            req: {
                /**
                 * This is a number parameter
                 */
                id?: number;
                /**
                 * This is an array parameter
                 */
                parameterArray: Array<(string)> | null;
                /**
                 * This is a boolean parameter
                 */
                parameterBoolean: boolean | null;
                /**
                 * This is a dictionary parameter
                 */
                parameterDictionary: {
                    [key: string]: unknown;
                } | null;
                /**
                 * This is an enum parameter
                 */
                parameterEnum: 'Success' | 'Warning' | 'Error' | null;
                /**
                 * This is a number parameter
                 */
                parameterNumber: number;
                /**
                 * This is an object parameter
                 */
                parameterObject: {
                    [key: string]: unknown;
                } | null;
                /**
                 * This is a string parameter
                 */
                parameterString: string | null;
            };
            res: {
                /**
                 * Response is a simple number
                 */
                200: number;
                /**
                 * Response is a simple string
                 */
                201: string;
                /**
                 * Response is a simple boolean
                 */
                202: boolean;
                /**
                 * Response is a simple object
                 */
                203: {
                    [key: string]: unknown;
                };
            };
        };
    };
    '/api/v{api-version}/upload': {
        post: {
            req: {
                /**
                 * Supply a file reference for upload
                 */
                file: (Blob | File);
            };
            res: {
                200: boolean;
            };
        };
    };
    '/api/v{api-version}/file/{id}': {
        get: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Success
                 */
                200: (Blob | File);
            };
        };
    };
    '/api/v{api-version}/complex': {
        get: {
            req: {
                /**
                 * Parameter containing object
                 */
                parameterObject: {
                    first?: {
                        second?: {
                            third?: string;
                        };
                    };
                };
                /**
                 * Parameter containing reference
                 */
                parameterReference: ModelWithString;
            };
            res: {
                /**
                 * Successful response
                 */
                200: Array<ModelWithString>;
                /**
                 * 400 `server` error
                 */
                400: unknown;
                /**
                 * 500 server error
                 */
                500: unknown;
            };
        };
    };
    '/api/v{api-version}/complex/{id}': {
        put: {
            req: {
                id: number;
                requestBody?: {
                    readonly key: string | null;
                    name: string | null;
                    enabled?: boolean;
                    readonly type: 'Monkey' | 'Horse' | 'Bird';
                    listOfModels?: Array<ModelWithString> | null;
                    listOfStrings?: Array<(string)> | null;
                    parameters: ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary;
                    readonly user?: {
                        readonly id?: number;
                        readonly name?: string | null;
                    };
                };
            };
            res: {
                /**
                 * Success
                 */
                200: ModelWithString;
            };
        };
    };
    '/api/v{api-version}/multipart': {
        post: {
            req: {
                formData?: {
                    content?: (Blob | File);
                    data?: ModelWithString | null;
                };
            };
        };
        get: {
            res: {
                /**
                 * OK
                 */
                200: {
                    file?: (Blob | File);
                    metadata?: {
                        foo?: string;
                        bar?: string;
                    };
                };
            };
        };
    };
    '/api/v{api-version}/header': {
        post: {
            res: {
                /**
                 * Successful response
                 */
                200: string;
                /**
                 * 400 server error
                 */
                400: unknown;
                /**
                 * 500 server error
                 */
                500: unknown;
            };
        };
    };
    '/api/v{api-version}/error': {
        post: {
            req: {
                /**
                 * Status code to return
                 */
                status: number;
            };
            res: {
                /**
                 * Custom message: Successful response
                 */
                200: unknown;
                /**
                 * Custom message: Internal Server Error
                 */
                500: unknown;
                /**
                 * Custom message: Not Implemented
                 */
                501: unknown;
                /**
                 * Custom message: Bad Gateway
                 */
                502: unknown;
                /**
                 * Custom message: Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串': {
        post: {
            req: {
                /**
                 * Dummy input param
                 */
                nonAsciiParamæøåÆøÅöôêÊ: number;
            };
            res: {
                /**
                 * Successful response
                 */
                200: Array<NonAsciiStringæøåÆØÅöôêÊ字符串>;
            };
        };
    };
};