// This file is auto-generated by @hey-api/openapi-ts

export const $camelCaseCommentWithBreaks = {
    type: 'integer'
} as const;

export const $CommentWithBreaks = {
    type: 'integer'
} as const;

export const $CommentWithBackticks = {
    type: 'integer'
} as const;

export const $CommentWithBackticksAndQuotes = {
    type: 'integer'
} as const;

export const $CommentWithSlashes = {
    type: 'integer'
} as const;

export const $CommentWithExpressionPlaceholders = {
    type: 'integer'
} as const;

export const $CommentWithQuotes = {
    type: 'integer'
} as const;

export const $CommentWithReservedCharacters = {
    type: 'integer'
} as const;

export const $SimpleInteger = {
    type: 'integer'
} as const;

export const $SimpleBoolean = {
    type: 'boolean'
} as const;

export const $SimpleString = {
    type: 'string'
} as const;

export const $NonAsciiStringæøåÆØÅöôêÊ字符串 = {
    type: 'string'
} as const;

export const $SimpleFile = {
    type: 'file'
} as const;

export const $SimpleReference = {
    '$ref': '#/components/schemas/ModelWithString'
} as const;

export const $SimpleStringWithPattern = {
    type: 'string',
    nullable: true,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$'
} as const;

export const $EnumWithStrings = {
    enum: ['Success', 'Warning', 'Error', "'Single Quote'", '"Double Quotes"', 'Non-ascii: øæåôöØÆÅÔÖ字符串']
} as const;

export const $EnumWithReplacedCharacters = {
    enum: ["'Single Quote'", '"Double Quotes"', 'øæåôöØÆÅÔÖ字符串', 3.1, ''],
    type: 'string'
} as const;

export const $EnumWithNumbers = {
    enum: [1, 2, 3, 1.1, 1.2, 1.3, 100, 200, 300, -100, -200, -300, -1.1, -1.2, -1.3],
    default: 200
} as const;

export const $EnumFromDescription = {
    type: 'number'
} as const;

export const $EnumWithExtensions = {
    enum: [200, 400, 500]
} as const;

export const $EnumWithXEnumNames = {
    enum: [0, 1, 2]
} as const;

export const $ArrayWithNumbers = {
    type: 'array',
    items: {
        type: 'integer'
    }
} as const;

export const $ArrayWithBooleans = {
    type: 'array',
    items: {
        type: 'boolean'
    }
} as const;

export const $ArrayWithStrings = {
    type: 'array',
    items: {
        type: 'string'
    },
    default: ['test']
} as const;

export const $ArrayWithReferences = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/ModelWithString'
    }
} as const;

export const $ArrayWithArray = {
    type: 'array',
    items: {
        type: 'array',
        items: {
            '$ref': '#/components/schemas/ModelWithString'
        }
    }
} as const;

export const $ArrayWithProperties = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            foo: {
                '$ref': '#/components/schemas/camelCaseCommentWithBreaks'
            },
            bar: {
                type: 'string'
            }
        }
    }
} as const;

export const $ArrayWithAnyOfProperties = {
    type: 'array',
    items: {
        anyOf: [
            {
                type: 'object',
                properties: {
                    foo: {
                        type: 'string',
                        default: 'test'
                    }
                }
            },
            {
                type: 'object',
                properties: {
                    bar: {
                        type: 'string'
                    }
                }
            }
        ]
    }
} as const;

export const $AnyOfAnyAndNull = {
    type: 'object',
    properties: {
        data: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ]
        }
    }
} as const;

export const $AnyOfArrays = {
    type: 'object',
    properties: {
        results: {
            items: {
                anyOf: [
                    {
                        type: 'object',
                        properties: {
                            foo: {
                                type: 'string'
                            }
                        }
                    },
                    {
                        type: 'object',
                        properties: {
                            bar: {
                                type: 'string'
                            }
                        }
                    }
                ]
            },
            type: 'array'
        }
    }
} as const;

export const $DictionaryWithString = {
    type: 'object',
    additionalProperties: {
        type: 'string'
    }
} as const;

export const $DictionaryWithPropertiesAndAdditionalProperties = {
    type: 'object',
    properties: {
        foo: {
            type: 'string'
        }
    },
    additionalProperties: {
        type: 'string'
    }
} as const;

export const $DictionaryWithReference = {
    type: 'object',
    additionalProperties: {
        '$ref': '#/components/schemas/ModelWithString'
    }
} as const;

export const $DictionaryWithArray = {
    type: 'object',
    additionalProperties: {
        type: 'array',
        items: {
            '$ref': '#/components/schemas/ModelWithString'
        }
    }
} as const;

export const $DictionaryWithDictionary = {
    type: 'object',
    additionalProperties: {
        type: 'object',
        additionalProperties: {
            type: 'string'
        }
    }
} as const;

export const $DictionaryWithProperties = {
    type: 'object',
    additionalProperties: {
        type: 'object',
        properties: {
            foo: {
                type: 'string'
            },
            bar: {
                type: 'string'
            }
        }
    }
} as const;

export const $ModelWithInteger = {
    type: 'object',
    properties: {
        prop: {
            type: 'integer'
        }
    }
} as const;

export const $ModelWithBoolean = {
    type: 'object',
    properties: {
        prop: {
            type: 'boolean'
        }
    }
} as const;

export const $ModelWithString = {
    type: 'object',
    properties: {
        prop: {
            type: 'string'
        }
    }
} as const;

export const $ModelWithStringError = {
    type: 'object',
    properties: {
        prop: {
            type: 'string'
        }
    }
} as const;

export const $Model_From_Zendesk = {
    type: 'string'
} as const;

export const $ModelWithNullableString = {
    type: 'object',
    required: ['nullableRequiredProp1', 'nullableRequiredProp2'],
    properties: {
        nullableProp1: {
            type: 'string',
            nullable: true
        },
        nullableRequiredProp1: {
            type: 'string',
            nullable: true
        },
        nullableProp2: {
            type: ['string', 'null']
        },
        nullableRequiredProp2: {
            type: ['string', 'null']
        },
        'foo_bar-enum': {
            enum: ['Success', 'Warning', 'Error', 'ØÆÅ字符串']
        }
    }
} as const;

export const $ModelWithEnum = {
    type: 'object',
    properties: {
        'foo_bar-enum': {
            enum: ['Success', 'Warning', 'Error', 'ØÆÅ字符串']
        },
        statusCode: {
            enum: ['100', '200 FOO', '300 FOO_BAR', '400 foo-bar', '500 foo.bar', '600 foo&bar']
        },
        bool: {
            type: 'boolean',
            enum: [true]
        }
    }
} as const;

export const $ModelWithEnumWithHyphen = {
    type: 'object',
    properties: {
        'foo-bar-baz-qux': {
            type: 'string',
            enum: ['3.0'],
            title: 'Foo-Bar-Baz-Qux',
            default: '3.0'
        }
    }
} as const;

export const $ModelWithEnumFromDescription = {
    type: 'object',
    properties: {
        test: {
            type: 'integer'
        }
    }
} as const;

export const $ModelWithNestedEnums = {
    type: 'object',
    properties: {
        dictionaryWithEnum: {
            type: 'object',
            additionalProperties: {
                enum: ['Success', 'Warning', 'Error']
            }
        },
        dictionaryWithEnumFromDescription: {
            type: 'object',
            additionalProperties: {
                type: 'integer'
            }
        },
        arrayWithEnum: {
            type: 'array',
            items: {
                enum: ['Success', 'Warning', 'Error']
            }
        },
        arrayWithDescription: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        'foo_bar-enum': {
            enum: ['Success', 'Warning', 'Error', 'ØÆÅ字符串']
        }
    }
} as const;

export const $ModelWithReference = {
    type: 'object',
    properties: {
        prop: {
            '$ref': '#/components/schemas/ModelWithProperties'
        }
    }
} as const;

export const $ModelWithArrayReadOnlyAndWriteOnly = {
    type: 'object',
    properties: {
        prop: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ModelWithReadOnlyAndWriteOnly'
            }
        },
        propWithFile: {
            type: 'array',
            items: {
                type: 'file'
            }
        },
        propWithNumber: {
            type: 'array',
            items: {
                type: 'number'
            }
        }
    }
} as const;

export const $ModelWithArray = {
    type: 'object',
    properties: {
        prop: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ModelWithString'
            }
        },
        propWithFile: {
            type: 'array',
            items: {
                type: 'file'
            }
        },
        propWithNumber: {
            type: 'array',
            items: {
                type: 'number'
            }
        }
    }
} as const;

export const $ModelWithDictionary = {
    type: 'object',
    properties: {
        prop: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        }
    }
} as const;

export const $DeprecatedModel = {
    deprecated: true,
    type: 'object',
    properties: {
        prop: {
            deprecated: true,
            type: 'string'
        }
    }
} as const;

export const $ModelWithCircularReference = {
    type: 'object',
    properties: {
        prop: {
            '$ref': '#/components/schemas/ModelWithCircularReference'
        }
    }
} as const;

export const $CompositionWithOneOf = {
    type: 'object',
    properties: {
        propA: {
            type: 'object',
            oneOf: [
                {
                    '$ref': '#/components/schemas/ModelWithString'
                },
                {
                    '$ref': '#/components/schemas/ModelWithEnum'
                },
                {
                    '$ref': '#/components/schemas/ModelWithArray'
                },
                {
                    '$ref': '#/components/schemas/ModelWithDictionary'
                }
            ]
        }
    }
} as const;

export const $CompositionWithOneOfAnonymous = {
    type: 'object',
    properties: {
        propA: {
            type: 'object',
            oneOf: [
                {
                    type: 'object',
                    properties: {
                        propA: {
                            type: 'string'
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'integer'
                }
            ]
        }
    }
} as const;

export const $ModelCircle = {
    type: 'object',
    required: ['kind'],
    properties: {
        kind: {
            type: 'string'
        },
        radius: {
            type: 'number'
        }
    }
} as const;

export const $ModelSquare = {
    type: 'object',
    required: ['kind'],
    properties: {
        kind: {
            type: 'string'
        },
        sideLength: {
            type: 'number'
        }
    }
} as const;

export const $CompositionWithOneOfDiscriminator = {
    type: 'object',
    oneOf: [
        {
            '$ref': '#/components/schemas/ModelCircle'
        },
        {
            '$ref': '#/components/schemas/ModelSquare'
        }
    ],
    discriminator: {
        propertyName: 'kind',
        mapping: {
            circle: '#/components/schemas/ModelCircle',
            square: '#/components/schemas/ModelSquare'
        }
    }
} as const;

export const $CompositionWithAnyOf = {
    type: 'object',
    properties: {
        propA: {
            type: 'object',
            anyOf: [
                {
                    '$ref': '#/components/schemas/ModelWithString'
                },
                {
                    '$ref': '#/components/schemas/ModelWithEnum'
                },
                {
                    '$ref': '#/components/schemas/ModelWithArray'
                },
                {
                    '$ref': '#/components/schemas/ModelWithDictionary'
                }
            ]
        }
    }
} as const;

export const $CompositionWithAnyOfAnonymous = {
    type: 'object',
    properties: {
        propA: {
            type: 'object',
            anyOf: [
                {
                    type: 'object',
                    properties: {
                        propA: {
                            type: 'string'
                        }
                    }
                },
                {
                    type: 'string'
                },
                {
                    type: 'integer'
                }
            ]
        }
    }
} as const;

export const $CompositionWithNestedAnyAndTypeNull = {
    type: 'object',
    properties: {
        propA: {
            type: 'object',
            anyOf: [
                {
                    items: {
                        anyOf: [
                            {
                                '$ref': '#/components/schemas/ModelWithDictionary'
                            },
                            {
                                type: 'null'
                            }
                        ]
                    },
                    type: 'array'
                },
                {
                    items: {
                        anyOf: [
                            {
                                '$ref': '#/components/schemas/ModelWithArray'
                            },
                            {
                                type: 'null'
                            }
                        ]
                    },
                    type: 'array'
                }
            ]
        }
    }
} as const;

export const $Enum1 = {
    enum: ['Bird', 'Dog'],
    type: 'string'
} as const;

export const $ConstValue = {
    type: 'string',
    const: 'ConstValue'
} as const;

export const $CompositionWithNestedAnyOfAndNull = {
    type: 'object',
    properties: {
        propA: {
            anyOf: [
                {
                    items: {
                        anyOf: [
                            {
                                '$ref': '#/components/schemas/Enum1'
                            },
                            {
                                '$ref': '#/components/schemas/ConstValue'
                            }
                        ]
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scopes'
        }
    }
} as const;

export const $CompositionWithOneOfAndNullable = {
    type: 'object',
    properties: {
        propA: {
            nullable: true,
            type: 'object',
            oneOf: [
                {
                    type: 'object',
                    properties: {
                        boolean: {
                            type: 'boolean'
                        }
                    }
                },
                {
                    '$ref': '#/components/schemas/ModelWithEnum'
                },
                {
                    '$ref': '#/components/schemas/ModelWithArray'
                },
                {
                    '$ref': '#/components/schemas/ModelWithDictionary'
                }
            ]
        }
    }
} as const;

export const $CompositionWithOneOfAndSimpleDictionary = {
    type: 'object',
    properties: {
        propA: {
            oneOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'object',
                    additionalProperties: {
                        type: 'number'
                    }
                }
            ]
        }
    }
} as const;

export const $CompositionWithOneOfAndSimpleArrayDictionary = {
    type: 'object',
    properties: {
        propA: {
            oneOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'boolean'
                        }
                    }
                }
            ]
        }
    }
} as const;

export const $CompositionWithOneOfAndComplexArrayDictionary = {
    type: 'object',
    properties: {
        propA: {
            oneOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            oneOf: [
                                {
                                    type: 'number'
                                },
                                {
                                    type: 'string'
                                }
                            ]
                        }
                    }
                }
            ]
        }
    }
} as const;

export const $CompositionWithAllOfAndNullable = {
    type: 'object',
    properties: {
        propA: {
            nullable: true,
            type: 'object',
            allOf: [
                {
                    type: 'object',
                    properties: {
                        boolean: {
                            type: 'boolean'
                        }
                    }
                },
                {
                    '$ref': '#/components/schemas/ModelWithEnum'
                },
                {
                    '$ref': '#/components/schemas/ModelWithArray'
                },
                {
                    '$ref': '#/components/schemas/ModelWithDictionary'
                }
            ]
        }
    }
} as const;

export const $CompositionWithAnyOfAndNullable = {
    type: 'object',
    properties: {
        propA: {
            nullable: true,
            type: 'object',
            anyOf: [
                {
                    type: 'object',
                    properties: {
                        boolean: {
                            type: 'boolean'
                        }
                    }
                },
                {
                    '$ref': '#/components/schemas/ModelWithEnum'
                },
                {
                    '$ref': '#/components/schemas/ModelWithArray'
                },
                {
                    '$ref': '#/components/schemas/ModelWithDictionary'
                }
            ]
        }
    }
} as const;

export const $CompositionBaseModel = {
    type: 'object',
    properties: {
        firstName: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        }
    }
} as const;

export const $CompositionExtendedModel = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/CompositionBaseModel'
        }
    ],
    properties: {
        age: {
            type: 'number'
        }
    },
    required: ['firstName', 'lastname', 'age']
} as const;

export const $ModelWithProperties = {
    type: 'object',
    required: ['required', 'requiredAndReadOnly', 'requiredAndNullable'],
    properties: {
        required: {
            type: 'string'
        },
        requiredAndReadOnly: {
            type: 'string',
            readOnly: true
        },
        requiredAndNullable: {
            type: 'string',
            nullable: true
        },
        string: {
            type: 'string'
        },
        number: {
            type: 'number'
        },
        boolean: {
            type: 'boolean'
        },
        reference: {
            '$ref': '#/components/schemas/ModelWithString'
        },
        'property with space': {
            type: 'string'
        },
        default: {
            type: 'string'
        },
        try: {
            type: 'string'
        },
        '@namespace.string': {
            type: 'string',
            readOnly: true
        },
        '@namespace.integer': {
            type: 'integer',
            readOnly: true
        }
    }
} as const;

export const $ModelWithNestedProperties = {
    type: 'object',
    required: ['first'],
    properties: {
        first: {
            type: 'object',
            required: ['second'],
            readOnly: true,
            nullable: true,
            properties: {
                second: {
                    type: 'object',
                    required: ['third'],
                    readOnly: true,
                    nullable: true,
                    properties: {
                        third: {
                            type: 'string',
                            required: true,
                            readOnly: true,
                            nullable: true
                        }
                    }
                }
            }
        }
    }
} as const;

export const $ModelWithDuplicateProperties = {
    type: 'object',
    properties: {
        prop: {
            '$ref': '#/components/schemas/ModelWithString'
        }
    }
} as const;

export const $ModelWithOrderedProperties = {
    type: 'object',
    properties: {
        zebra: {
            type: 'string'
        },
        apple: {
            type: 'string'
        },
        hawaii: {
            type: 'string'
        }
    }
} as const;

export const $ModelWithDuplicateImports = {
    type: 'object',
    properties: {
        propA: {
            '$ref': '#/components/schemas/ModelWithString'
        },
        propB: {
            '$ref': '#/components/schemas/ModelWithString'
        },
        propC: {
            '$ref': '#/components/schemas/ModelWithString'
        }
    }
} as const;

export const $ModelThatExtends = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/ModelWithString'
        },
        {
            type: 'object',
            properties: {
                propExtendsA: {
                    type: 'string'
                },
                propExtendsB: {
                    '$ref': '#/components/schemas/ModelWithString'
                }
            }
        }
    ]
} as const;

export const $ModelThatExtendsExtends = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/ModelWithString'
        },
        {
            '$ref': '#/components/schemas/ModelThatExtends'
        },
        {
            type: 'object',
            properties: {
                propExtendsC: {
                    type: 'string'
                },
                propExtendsD: {
                    '$ref': '#/components/schemas/ModelWithString'
                }
            }
        }
    ]
} as const;

export const $ModelWithPattern = {
    type: 'object',
    required: ['key', 'name'],
    properties: {
        key: {
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
            type: 'string'
        },
        name: {
            maxLength: 255,
            type: 'string'
        },
        enabled: {
            type: 'boolean',
            readOnly: true
        },
        modified: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        id: {
            type: 'string',
            pattern: '^\d{2}-\d{3}-\d{4}$'
        },
        text: {
            type: 'string',
            pattern: '^\w+$'
        },
        patternWithSingleQuotes: {
            type: 'string',
            pattern: "^[a-zA-Z0-9']*$"
        },
        patternWithNewline: {
            type: 'string',
            pattern: `aaa
bbb`
        },
        patternWithBacktick: {
            type: 'string',
            pattern: 'aaa`bbb'
        }
    }
} as const;

export const $File = {
    required: ['mime'],
    type: 'object',
    properties: {
        id: {
            title: 'Id',
            type: 'string',
            readOnly: true,
            minLength: 1
        },
        updated_at: {
            title: 'Updated at',
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        created_at: {
            title: 'Created at',
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        mime: {
            title: 'Mime',
            type: 'string',
            maxLength: 24,
            minLength: 1
        },
        file: {
            title: 'File',
            type: 'string',
            readOnly: true,
            format: 'uri'
        }
    }
} as const;

export const $default = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        }
    }
} as const;

export const $Pageable = {
    type: 'object',
    properties: {
        page: {
            minimum: 0,
            type: 'integer',
            format: 'int32',
            default: 0
        },
        size: {
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        sort: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $FreeFormObjectWithoutAdditionalProperties = {
    type: 'object'
} as const;

export const $FreeFormObjectWithAdditionalPropertiesEqTrue = {
    type: 'object',
    additionalProperties: true
} as const;

export const $FreeFormObjectWithAdditionalPropertiesEqEmptyObject = {
    type: 'object',
    additionalProperties: {}
} as const;

export const $ModelWithConst = {
    type: 'object',
    properties: {
        String: {
            const: 'String'
        },
        number: {
            const: 0
        },
        null: {
            const: null
        },
        withType: {
            type: 'string',
            const: 'Some string'
        }
    }
} as const;

export const $ModelWithAdditionalPropertiesEqTrue = {
    type: 'object',
    properties: {
        prop: {
            type: 'string'
        }
    },
    additionalProperties: true
} as const;

export const $NestedAnyOfArraysNullable = {
    properties: {
        nullableArray: {
            anyOf: [
                {
                    items: {
                        anyOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'boolean'
                            }
                        ]
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object'
} as const;

export const $CompositionWithOneOfAndProperties = {
    type: 'object',
    oneOf: [
        {
            type: 'object',
            required: ['foo'],
            properties: {
                foo: {
                    '$ref': '#/components/parameters/SimpleParameter'
                }
            },
            additionalProperties: false
        },
        {
            type: 'object',
            required: ['bar'],
            properties: {
                bar: {
                    '$ref': '#/components/schemas/NonAsciiString%C3%A6%C3%B8%C3%A5%C3%86%C3%98%C3%85%C3%B6%C3%B4%C3%AA%C3%8A%E5%AD%97%E7%AC%A6%E4%B8%B2'
                }
            },
            additionalProperties: false
        }
    ],
    required: ['baz', 'qux'],
    properties: {
        baz: {
            type: 'integer',
            format: 'uint16',
            minimum: 0,
            nullable: true
        },
        qux: {
            type: 'integer',
            format: 'uint8',
            minimum: 0
        }
    }
} as const;

export const $NullableObject = {
    type: 'object',
    nullable: true,
    properties: {
        foo: {
            type: 'string'
        }
    },
    default: null
} as const;

export const $CharactersInDescription = {
    type: 'string'
} as const;

export const $ModelWithNullableObject = {
    type: 'object',
    properties: {
        data: {
            '$ref': '#/components/schemas/NullableObject'
        }
    }
} as const;

export const $ModelWithOneOfEnum = {
    oneOf: [
        {
            type: 'object',
            required: ['foo'],
            properties: {
                foo: {
                    type: 'string',
                    enum: ['Bar']
                }
            }
        },
        {
            type: 'object',
            required: ['foo'],
            properties: {
                foo: {
                    type: 'string',
                    enum: ['Baz']
                }
            }
        },
        {
            type: 'object',
            required: ['foo'],
            properties: {
                foo: {
                    type: 'string',
                    enum: ['Qux']
                }
            }
        },
        {
            type: 'object',
            required: ['content', 'foo'],
            properties: {
                content: {
                    type: 'string',
                    format: 'date-time'
                },
                foo: {
                    type: 'string',
                    enum: ['Quux']
                }
            }
        },
        {
            type: 'object',
            required: ['content', 'foo'],
            properties: {
                content: {
                    type: 'array',
                    items: [
                        {
                            type: 'string',
                            format: 'date-time'
                        },
                        {
                            type: 'string'
                        }
                    ],
                    maxItems: 2,
                    minItems: 2
                },
                foo: {
                    type: 'string',
                    enum: ['Corge']
                }
            }
        }
    ]
} as const;

export const $ModelWithNestedArrayEnumsDataFoo = {
    enum: ['foo', 'bar'],
    type: 'string'
} as const;

export const $ModelWithNestedArrayEnumsDataBar = {
    enum: ['baz', 'qux'],
    type: 'string'
} as const;

export const $ModelWithNestedArrayEnumsData = {
    type: 'object',
    properties: {
        foo: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ModelWithNestedArrayEnumsDataFoo'
            }
        },
        bar: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ModelWithNestedArrayEnumsDataBar'
            }
        }
    }
} as const;

export const $ModelWithNestedArrayEnums = {
    type: 'object',
    properties: {
        array_strings: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        data: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ModelWithNestedArrayEnumsData'
                }
            ]
        }
    }
} as const;

export const $ModelWithNestedCompositionEnums = {
    type: 'object',
    properties: {
        foo: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ModelWithNestedArrayEnumsDataFoo'
                }
            ]
        }
    }
} as const;

export const $ModelWithReadOnlyAndWriteOnly = {
    type: 'object',
    required: ['foo', 'bar', 'baz'],
    properties: {
        foo: {
            type: 'string'
        },
        bar: {
            readOnly: true,
            type: 'string'
        },
        baz: {
            type: 'string',
            writeOnly: true
        }
    }
} as const;

export const $ModelWithConstantSizeArray = {
    type: 'array',
    items: {
        type: 'number'
    },
    minItems: 2,
    maxItems: 2
} as const;

export const $ModelWithAnyOfConstantSizeArray = {
    type: 'array',
    items: {
        oneOf: [
            {
                type: 'number'
            },
            {
                type: 'string'
            }
        ]
    },
    minItems: 3,
    maxItems: 3
} as const;

export const $ModelWithAnyOfConstantSizeArrayNullable = {
    type: 'array',
    items: {
        oneOf: [
            {
                type: 'number',
                nullable: true
            },
            {
                type: 'string'
            }
        ]
    },
    minItems: 3,
    maxItems: 3
} as const;

export const $ModelWithAnyOfConstantSizeArrayWithNSizeAndOptions = {
    type: 'array',
    items: {
        oneOf: [
            {
                type: 'number'
            },
            {
                type: 'string'
            }
        ]
    },
    minItems: 2,
    maxItems: 2
} as const;

export const $ModelWithAnyOfConstantSizeArrayAndIntersect = {
    type: 'array',
    items: {
        allOf: [
            {
                type: 'number'
            },
            {
                type: 'string'
            }
        ]
    },
    minItems: 2,
    maxItems: 2
} as const;

export const $ModelWithNumericEnumUnion = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            enum: [-10, -1, 0, 1, 3, 6, 12]
        }
    }
} as const;

export const $ModelWithBackticksInDescription = {
    type: 'object',
    properties: {
        template: {
            type: 'string'
        }
    }
} as const;