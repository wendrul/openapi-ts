// This file is auto-generated by @hey-api/openapi-ts

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;

/**
 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
 */
export type CommentWithBackticks = number;

/**
 * Testing backticks and quotes in string: `backticks`, 'quotes', "double quotes" and ```multiple backticks``` should work
 */
export type CommentWithBackticksAndQuotes = number;

/**
 * Testing slashes in string: \backwards\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;

/**
 * Testing expression placeholders in string: ${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export type CommentWithQuotes = number;

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;

/**
 * This is a simple number
 */
export type SimpleInteger = number;

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;

/**
 * This is a simple string
 */
export type SimpleString = string;

/**
 * A string with non-ascii (unicode) characters valid in typescript identifiers (æøåÆØÅöÔèÈ字符串)
 */
export type NonAsciiStringæøåÆØÅöôêÊ字符串 = string;

/**
 * This is a simple file
 */
export type SimpleFile = (Blob | File);

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string;

/**
 * This is a simple enum with strings
 */
export type EnumWithStrings = 'Success' | 'Warning' | 'Error' | "'Single Quote'" | '"Double Quotes"' | 'Non-ascii: øæåôöØÆÅÔÖ字符串';

/**
 * This is a simple enum with numbers
 */
export type EnumWithNumbers = 1 | 2 | 3 | 1.1 | 1.2 | 1.3 | 100 | 200 | 300 | -100 | -200 | -300 | -1.1 | -1.2 | -1.3;

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;

/**
 * This is a simple enum with numbers
 */
export type EnumWithExtensions = 200 | 400 | 500;

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<(number)>;

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<(boolean)>;

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<(string)>;

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;

/**
 * This is a string dictionary
 */
export type DictionaryWithString = {
    [key: string]: (string);
};

/**
 * This is a string reference
 */
export type DictionaryWithReference = {
    [key: string]: ModelWithString;
};

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = {
    [key: string]: Array<ModelWithString>;
};

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = {
    [key: string]: {
        [key: string]: (string);
    };
};

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = {
    [key: string]: {
        foo?: string;
        bar?: string;
    };
};

/**
 * This is a type-only model that defines Date as a string
 */
export type Date = string;

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

/**
 * This is a model with one string property
 */
export type ModelWithStringError = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp: string | null;
};

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
    /**
     * These are the HTTP error code enums
     */
    statusCode?: '100' | '200 FOO' | '300 FOO_BAR' | '400 foo-bar' | '500 foo.bar' | '600 foo&bar';
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: {
        [key: string]: ('Success' | 'Warning' | 'Error');
    };
    dictionaryWithEnumFromDescription?: {
        [key: string]: (number);
    };
    arrayWithEnum?: Array<('Success' | 'Warning' | 'Error')>;
    arrayWithDescription?: Array<(number)>;
};

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<((Blob | File))>;
    propWithNumber?: Array<(number)>;
};

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: {
        [key: string]: (string);
    };
};

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string;
        };
    };
};

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
};

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
};

export type _default = {
    name?: string;
};

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
    patternWithNewline?: string;
    patternWithBacktick?: string;
};

export type $OpenApiTs = {
    '/api/v{api-version}/descriptions/': {
        post: {
            req: {
                /**
                 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
                 */
                parameterWithBackticks?: string;
                /**
                 * Testing multiline comments in string: First line
                 * Second line
                 *
                 * Fourth line
                 */
                parameterWithBreaks?: string;
                /**
                 * Testing expression placeholders in string: ${expression} should work
                 */
                parameterWithExpressionPlaceholders?: string;
                /**
                 * Testing quotes in string: 'single quote''' and "double quotes""" should work
                 */
                parameterWithQuotes?: string;
                /**
                 * Testing reserved characters in string: * inline * and ** inline ** should work
                 */
                parameterWithReservedCharacters?: string;
                /**
                 * Testing slashes in string: \backwards\\\ and /forwards/// should work
                 */
                parameterWithSlashes?: string;
            };
        };
    };
    '/api/v{api-version}/parameters/{parameterPath}': {
        post: {
            req: {
                /**
                 * This is the parameter that is sent as request body
                 */
                parameterBody: string;
                /**
                 * This is the parameter that goes into the form data
                 */
                parameterForm: string;
                /**
                 * This is the parameter that goes into the header
                 */
                parameterHeader: string;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath: string;
                /**
                 * This is the parameter that goes into the query params
                 */
                parameterQuery: string;
            };
        };
    };
    '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}': {
        post: {
            req: {
                /**
                 * This is the parameter with a reserved keyword
                 */
                _default?: string;
                /**
                 * This is the parameter that is sent as request body
                 */
                parameterBody: string;
                /**
                 * This is the parameter that goes into the request form data
                 */
                parameterForm: string;
                /**
                 * This is the parameter that goes into the request header
                 */
                parameterHeader: string;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath1?: string;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath2?: string;
                /**
                 * This is the parameter that goes into the path
                 */
                parameterPath3?: string;
                /**
                 * This is the parameter that goes into the request query params
                 */
                parameterQuery: string;
            };
        };
    };
    '/api/v{api-version}/defaults': {
        get: {
            req: {
                /**
                 * This is a simple boolean with default value
                 */
                parameterBoolean: boolean;
                /**
                 * This is a simple enum with default value
                 */
                parameterEnum: 'Success' | 'Warning' | 'Error';
                /**
                 * This is a simple model with default value
                 */
                parameterModel: ModelWithString;
                /**
                 * This is a simple number with default value
                 */
                parameterNumber: number;
                /**
                 * This is a simple string with default value
                 */
                parameterString: string;
            };
        };
        post: {
            req: {
                /**
                 * This is a simple boolean that is optional with default value
                 */
                parameterBoolean?: boolean;
                /**
                 * This is a simple enum that is optional with default value
                 */
                parameterEnum?: 'Success' | 'Warning' | 'Error';
                /**
                 * This is a simple model that is optional with default value
                 */
                parameterModel?: ModelWithString;
                /**
                 * This is a simple number that is optional with default value
                 */
                parameterNumber?: number;
                /**
                 * This is a simple string that is optional with default value
                 */
                parameterString?: string;
            };
        };
        put: {
            req: {
                /**
                 * This is a optional string with default
                 */
                parameterOptionalStringWithDefault?: string;
                /**
                 * This is a optional string with empty default
                 */
                parameterOptionalStringWithEmptyDefault?: string;
                /**
                 * This is a optional string with no default
                 */
                parameterOptionalStringWithNoDefault?: string;
                /**
                 * This is a string that can be null with default
                 */
                parameterStringNullableWithDefault?: string | null;
                /**
                 * This is a string that can be null with no default
                 */
                parameterStringNullableWithNoDefault?: string | null;
                /**
                 * This is a string with default
                 */
                parameterStringWithDefault: string;
                /**
                 * This is a string with empty default
                 */
                parameterStringWithEmptyDefault: string;
                /**
                 * This is a string with no default
                 */
                parameterStringWithNoDefault: string;
            };
        };
    };
    '/api/v{api-version}/no-content': {
        get: {
            res: {
                /**
                 * Success
                 */
                204: void;
            };
        };
    };
    '/api/v{api-version}/multiple-tags/response-and-no-content': {
        get: {
            res: {
                /**
                 * Response is a simple number
                 */
                200: unknown;
                /**
                 * Success
                 */
                204: void;
            };
        };
    };
    '/api/v{api-version}/response': {
        get: {
            res: {
                /**
                 * Message for default response
                 */
                200: ModelWithString;
            };
        };
        post: {
            res: {
                /**
                 * Message for default response
                 */
                200: ModelWithString;
                /**
                 * Message for 500 error
                 */
                500: ModelWithStringError;
                /**
                 * Message for 501 error
                 */
                501: ModelWithStringError;
                /**
                 * Message for 502 error
                 */
                502: ModelWithStringError;
            };
        };
        put: {
            res: {
                /**
                 * Message for default response
                 */
                200: ModelWithString;
                /**
                 * Message for 201 response
                 */
                201: ModelThatExtends;
                /**
                 * Message for 202 response
                 */
                202: ModelThatExtendsExtends;
                /**
                 * Message for 500 error
                 */
                500: ModelWithStringError;
                /**
                 * Message for 501 error
                 */
                501: ModelWithStringError;
                /**
                 * Message for 502 error
                 */
                502: ModelWithStringError;
            };
        };
    };
    '/api/v{api-version}/multiple-tags/a': {
        get: {
            res: {
                /**
                 * Success
                 */
                204: void;
            };
        };
    };
    '/api/v{api-version}/multiple-tags/b': {
        get: {
            res: {
                /**
                 * Success
                 */
                204: void;
            };
        };
    };
    '/api/v{api-version}/collectionFormat': {
        get: {
            req: {
                /**
                 * This is an array parameter that is sent as csv format (comma-separated values)
                 */
                parameterArrayCsv: Array<string>;
                /**
                 * This is an array parameter that is sent as multi format (multiple parameter instances)
                 */
                parameterArrayMulti: Array<string>;
                /**
                 * This is an array parameter that is sent as pipes format (pipe-separated values)
                 */
                parameterArrayPipes: Array<string>;
                /**
                 * This is an array parameter that is sent as ssv format (space-separated values)
                 */
                parameterArraySsv: Array<string>;
                /**
                 * This is an array parameter that is sent as tsv format (tab-separated values)
                 */
                parameterArrayTsv: Array<string>;
            };
        };
    };
    '/api/v{api-version}/types': {
        get: {
            req: {
                /**
                 * This is a number parameter
                 */
                id?: number;
                /**
                 * This is an array parameter
                 */
                parameterArray: Array<string>;
                /**
                 * This is a boolean parameter
                 */
                parameterBoolean: boolean;
                /**
                 * This is a dictionary parameter
                 */
                parameterDictionary: {
                    [key: string]: string;
                };
                /**
                 * This is an enum parameter
                 */
                parameterEnum: 'Success' | 'Warning' | 'Error';
                /**
                 * This is a number parameter
                 */
                parameterNumber: number;
                /**
                 * This is an object parameter
                 */
                parameterObject: unknown;
                /**
                 * This is a string parameter
                 */
                parameterString: string;
            };
            res: {
                /**
                 * Response is a simple number
                 */
                200: number;
                /**
                 * Response is a simple string
                 */
                201: string;
                /**
                 * Response is a simple boolean
                 */
                202: boolean;
                /**
                 * Response is a simple object
                 */
                203: unknown;
            };
        };
    };
    '/api/v{api-version}/complex': {
        get: {
            req: {
                /**
                 * Parameter containing object
                 */
                parameterObject: {
                    first?: {
                        second?: {
                            third?: string;
                        };
                    };
                };
                /**
                 * Parameter containing reference
                 */
                parameterReference: ModelWithString;
            };
            res: {
                /**
                 * Successful response
                 */
                200: Array<ModelWithString>;
                /**
                 * 400 server error
                 */
                400: unknown;
                /**
                 * 500 server error
                 */
                500: unknown;
            };
        };
    };
    '/api/v{api-version}/header': {
        post: {
            res: {
                /**
                 * Successful response
                 */
                200: string;
                /**
                 * 400 server error
                 */
                400: unknown;
                /**
                 * 500 server error
                 */
                500: unknown;
            };
        };
    };
    '/api/v{api-version}/error': {
        post: {
            req: {
                /**
                 * Status code to return
                 */
                status: string;
            };
            res: {
                /**
                 * Custom message: Successful response
                 */
                200: unknown;
                /**
                 * Custom message: Internal Server Error
                 */
                500: unknown;
                /**
                 * Custom message: Not Implemented
                 */
                501: unknown;
                /**
                 * Custom message: Bad Gateway
                 */
                502: unknown;
                /**
                 * Custom message: Service Unavailable
                 */
                503: unknown;
            };
        };
    };
    '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串': {
        post: {
            req: {
                /**
                 * Dummy input param
                 */
                nonAsciiParamæøåÆøÅöôêÊ: number;
            };
            res: {
                /**
                 * Successful response
                 */
                200: NonAsciiStringæøåÆØÅöôêÊ字符串;
            };
        };
    };
};